unit pontoVendaU;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, Grids, DBGrids, DB, Buttons, DBCtrls, Mask;

type
  TfrmPontoVenda = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    gbProdutos: TGroupBox;
    gbItens: TGroupBox;
    dbgItens: TDBGrid;
    dbgProdutos: TDBGrid;
    Panel4: TPanel;
    lbFiltro: TLabel;
    edtFiltro: TEdit;
    dsProduto: TDataSource;
    dsVenda: TDataSource;
    dsVendaItem: TDataSource;
    Panel5: TPanel;
    Panel6: TPanel;
    Panel7: TPanel;
    edtCliente: TEdit;
    btnCliente: TBitBtn;
    btnAdicionar: TBitBtn;
    btnRemover: TBitBtn;
    btnOK: TBitBtn;
    btnCancelar: TBitBtn;
    btnDepositarTroco: TBitBtn;
    GroupBox1: TGroupBox;
    GroupBox2: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    dbeEdit: TDBEdit;
    DBCFormaPagamento: TDBComboBox;
    Label3: TLabel;
    Label4: TLabel;
    edtValor: TEdit;
    edtTroco: TEdit;
    Label5: TLabel;
    Label6: TLabel;
    edtSaldoAtual: TEdit;
    edtNovoSaldo: TEdit;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure dbgProdutosTitleClick(Column: TColumn);
    procedure edtFiltroChange(Sender: TObject);
    procedure btnClienteClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnAdicionarClick(Sender: TObject);
    procedure btnRemoverClick(Sender: TObject);
    procedure edtValorKeyPress(Sender: TObject; var Key: Char);
    procedure edtValorChange(Sender: TObject);
    procedure DBCFormaPagamentoChange(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    IDCliente : Integer;
  end;

var
  frmPontoVenda: TfrmPontoVenda;
  Campo : string;


implementation
  uses principalU, dmU, identificaClientePDV;
{$R *.dfm}

procedure TfrmPontoVenda.btnAdicionarClick(Sender: TObject);
var
  saldo, novosaldo : real;

begin
// se nao encontrar o produto escolhido pelo vendedor entao cadastra o produto
if not dsVendaItem.DataSet.Locate('vi_produto', dsProduto.DataSet.FieldByName('p_id').Value, [loCaseInsensitive]) then begin
  with dsVendaItem.DataSet do begin
      Append;
        FieldByName('vi_produto').Value := dsProduto.DataSet.FieldByName('p_id').Value;
        FieldByName('vi_cliente').Value := IDCliente;
        FieldByName('vi_valor').Value := dsProduto.DataSet.FieldByName('p_preco').Value;
        FieldByName('vi_quantidade').Value := 1;
        FieldByName('vi_total').Value := FieldByName('vi_quantidade').Value * FieldByName('vi_valor').Value;
      Post;
  end;
end
else begin  // produto ja inserido antes, apenas aumenta a quantidade e calcula o sub-total
    with dsVendaItem.DataSet do begin
      Edit;
        FieldByName('vi_quantidade').Value := FieldByName('vi_quantidade').Value + 1;
        FieldByName('vi_total').Value := FieldByName('vi_quantidade').Value * FieldByName('vi_valor').Value;
      Post;
    end;
end;

// forca a atualizacao das informacoes que estao no banco de dados (carrega o nome dos produtos que antes nao carregava)
dsVendaItem.DataSet.Refresh;

// calcula o total a pagar da compra
with dmCantina.zrqrCalculaTotal do begin
    Params[0].Value := dsVenda.DataSet.FieldByName('v_id').Value;
    Open;
    dsVenda.DataSet.Edit;
        dsVenda.DataSet.FieldByName('v_total').Value := FieldByName('Total').Value;
    Close;
end;

// caso a forma de pagamento seja NIBBLE (conta do usuario) e mostra como sera atualizado os saldos
if UpperCase(DBCFormaPagamento.Text) = 'NIBBLE' then begin
    saldo := StrToCurr(edtSaldoAtual.Text);
    novosaldo := saldo - dmCantina.ztbVenda.FieldByName('v_total').Value; // calcula o novo saldo

    // mostra os valor formatados
    edtNovoSaldo.Text := FormatFloat('R$ #,###.00', novosaldo);
end;

dsProduto.DataSet.Filter := '';
dsProduto.DataSet.Filtered := false;
edtFiltro.Clear;
end;

procedure TfrmPontoVenda.btnClienteClick(Sender: TObject);
begin
  frmPrincipal.abreForm(TfrmIdentificaContaPDV);
end;

procedure TfrmPontoVenda.btnOKClick(Sender: TObject);
var
  novosaldo : string;

begin
  with dsVenda.DataSet do begin
    Edit;
      FieldByName('v_status').Value := 'ABERTO';
    Post;
    if UpperCase(FieldByName('v_formapagamento').Value) = 'NIBBLE' then begin
        dmCantina.zqrCliente.Open;
            dmCantina.zqrCliente.Locate('c_id', IDCliente, []);
            novosaldo := edtNovoSaldo.Text;
            System.delete(novosaldo, 1, 4);
            dmCantina.zqrCliente.Edit;
              dmCantina.zqrCliente.FieldByName('co_saldo').Value := strtofloat(novosaldo);
            dmCantina.zqrCliente.Post;
    end;

  end;
end;

procedure TfrmPontoVenda.btnRemoverClick(Sender: TObject);
var
  saldo, novosaldo : real;

begin
  dsVendaItem.DataSet.Delete;

// calcula o total a pagar da compra
with dmCantina.zrqrCalculaTotal do begin
    Params[0].Value := dsVenda.DataSet.FieldByName('v_id').Value;
    Open;
    dsVenda.DataSet.Edit;
        dsVenda.DataSet.FieldByName('v_total').Value := FieldByName('Total').Value;
    Close;
end;

// caso a forma de pagamento seja NIBBLE (conta do usuario) e mostra como sera atualizado os saldos
if UpperCase(DBCFormaPagamento.Text) = 'NIBBLE' then begin
    saldo := dmCantina.zqrCliente.FieldByName('co_saldo').Value; // grava o saldo em uma variavel temporaria
    novosaldo := saldo - dmCantina.ztbVenda.FieldByName('v_total').Value; // calcula o novo saldo
    edtNovoSaldo.Text := FormatFloat('R$ #,###.00', novosaldo);
end;

end;

procedure TfrmPontoVenda.DBCFormaPagamentoChange(Sender: TObject);
var
saldo, novosaldo : real;

begin
  if Length(edtSaldoAtual.Text) > 0 then begin
    // caso a forma de pagamento seja NIBBLE (conta do usuario) e mostra como sera atualizado os saldos
    if UpperCase(DBCFormaPagamento.Text) = 'NIBBLE' then begin
          saldo := StrToCurr(edtSaldoAtual.Text);
          novosaldo := saldo - dmCantina.ztbVenda.FieldByName('v_total').Value; // calcula o novo saldo

          // mostra os valor formatados
          edtNovoSaldo.Text := FormatFloat('R$ #,###.00', novosaldo);
end;
  end;
end;

procedure TfrmPontoVenda.dbgProdutosTitleClick(Column: TColumn);
begin
  Campo := Column.FieldName;
  lbFiltro.Caption := Column.Title.Caption + ': ';
  edtFiltro.Clear;
end;

procedure TfrmPontoVenda.edtFiltroChange(Sender: TObject);
begin
  if Length(edtFiltro.Text) > 0 then begin
      if dsProduto.DataSet.FieldByName(Campo) is TWideStringField then begin
          dsProduto.DataSet.Filter := Campo + ' like ' + QuotedStr('*'+edtFiltro.Text+'*');
      end
      else begin
          dsProduto.DataSet.Filter := Campo + ' = ' + edtFiltro.Text;
      end;

      dsProduto.DataSet.Filtered := true;
  end
  else begin
    dsProduto.DataSet.Filtered := false;
  end;
end;

procedure TfrmPontoVenda.edtValorChange(Sender: TObject);
var
  valor : Real;
  troco : Real;

begin
    if Length(edtValor.Text) > 0 then begin
       valor := StrToFloat(edtValor.Text);
       troco := valor - dsVenda.DataSet.FieldByName('v_total').AsFloat;
       edtTroco.Text := FormatFloat('R$ #,###.00', troco);
    end
    else
      edtTroco.Clear;
end;

procedure TfrmPontoVenda.edtValorKeyPress(Sender: TObject; var Key: Char);
begin
  if not (key in ['0'..'9', ',', char(VK_BACK)]) then begin
      key := #0;
  end;
end;

procedure TfrmPontoVenda.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  dsProduto.DataSet.Close;
  dsVenda.DataSet.Close;
  dsVendaItem.DataSet.Close;

  Action := caFree;
  self := nil;
end;

procedure TfrmPontoVenda.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if key = VK_ESCAPE then
  begin
    self.Close;
  end;
end;

procedure TfrmPontoVenda.FormShow(Sender: TObject);
begin
    dsProduto.DataSet.Open;
    dsVenda.DataSet.Open;
    dsVendaItem.DataSet.Open;
    dmCantina.zqrCliente.Open;

    IDCliente := 1;
    edtCliente.Text := 'Cliente Padrao';

    Campo := 'p_id';
    dsProduto.DataSet.Filtered := false;
    lbFiltro.Caption := 'ID: ';
    edtFiltro.Clear;

  With dsVenda.DataSet do begin
    Append;
      FieldByName('v_cliente').Value := IDCliente; // define cliente padrao (nao identificado) pode ser alterado posteriormente
      FieldByName('v_caixa').Value := 1; // codigo do usuario que fez login no sistema (montagem posterior no mecanismo de login)
      FieldByName('v_status').Value := 'CONSUMADO'; // status aberto pois e alterado quando o cliente pega o produto e nao quando ele paga o produto
      FieldByName('v_data').Value := now; // data e hora da compra e nao a data da consumacao
    Post;
  end;

end;

end.
